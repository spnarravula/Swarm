version: '3.8'

services:
  frontend:
    image: ravikc/todo-frontend:latest
    ports:
      - "8080:8080"
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
    networks:
      - todo-net

  backend:
    image: ravikc/todo-backend:latest
    ports:
      - "3000:3000"
    deploy:
      replicas: 2
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      # For production, use Docker Secrets instead of plaintext passwords
      - DB_PASSWORD=examplepassword
      - DB_NAME=tododb
    networks:
      - todo-net
    # This ensures the backend only starts after the database is healthy
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      # For production, use Docker Secrets
      POSTGRES_PASSWORD: examplepassword
      POSTGRES_DB: tododb
    volumes:
      - db-data:/var/lib/postgresql/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    networks:
      - todo-net
    # Healthcheck ensures the container is ready to accept connections
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tododb"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-data:
    # It's good practice to define the volume driver
    driver: local

networks:
  todo-net:
    driver: overlay
    # This makes the network attachable for potential ad-hoc containers
    attachable: true