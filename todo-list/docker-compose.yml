version: '3.8'

services:
  frontend:
    image: ravikc/todo-frontend:latest
    ports:
      - "8080:8080"
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
    networks:
      - todo-net

  backend:
    image: ravikc/todo-backend:latest
    ports:
      - "3000:3000"
    deploy:
      replicas: 2
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - DB_NAME=tododb
    networks:
      - todo-net
    depends_on:
      db:
        condition: service_healthy  # Enforces order in non-Swarm; in Swarm, use healthcheck or wait script
    secrets:
      - db_password
    healthcheck:  # Suggested: Check backend readiness and DB connection
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]  # Adjust to your backend's health endpoint
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_DB: tododb
    volumes:
      - db-data:/var/lib/postgresql/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    networks:
      - todo-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tododb"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - db_password

volumes:
  db-data:
    driver: local  # Consider a distributed driver for production multi-node

networks:
  todo-net:
    driver: overlay
    attachable: true

secrets:
  db_password:
    external: true  # Create this secret externally in Swarm